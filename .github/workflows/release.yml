name: Build and Release

on:
  release:
    types: [created]

# Add explicit permissions needed for release asset uploads
permissions:
  contents: write
  packages: write
  issues: read
  pull-requests: read

jobs:
  build:
    name: Build and Upload
    
    # Use release tag for reference
    env:
      RELEASE_TAG: ${{ github.event.release.tag_name }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build and package for macOS/Linux
        if: matrix.platform != 'win'
        shell: bash
        run: |
          # For macOS on GitHub Actions, we'll detect the architecture
          if [[ "${{ matrix.platform }}" == "mac" ]]; then
            arch=$(uname -m)
            echo "Building for macOS on $arch architecture"
            npm run make
          else
            echo "Building for Linux"
            npm run make
          fi
      
      - name: Build and package for Windows
        if: matrix.platform == 'win'
        shell: pwsh
        run: |
          Write-Host "Building for Windows"
          npm run make
      
      - name: Determine macOS architecture
        if: matrix.platform == 'mac'
        id: mac-arch
        run: |
          arch=$(uname -m)
          if [ "$arch" = "x86_64" ]; then
            echo "arch=x64" >> $GITHUB_OUTPUT
            echo "filename_arch=x64" >> $GITHUB_OUTPUT
          elif [ "$arch" = "arm64" ]; then
            echo "arch=arm64" >> $GITHUB_OUTPUT
            echo "filename_arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "Unknown architecture: $arch"
            exit 1
          fi

      - name: Get version from package.json (Unix)
        if: matrix.platform != 'win'
        id: get-version-unix
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"
          
      - name: Get version from package.json (Windows)
        if: matrix.platform == 'win'
        id: get-version-win
        shell: powershell
        run: |
          $VERSION = (node -p "require('./package.json').version")
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Check for macOS archive
        if: matrix.platform == 'mac'
        id: check-mac-archive
        run: |
          arch="${{ steps.mac-arch.outputs.arch }}"
          VERSION="${{ steps.get-version-unix.outputs.version }}"
          echo "Checking for macOS $arch archive with version $VERSION"
          find ./out -type f -name "*.zip" | sort
          if [ -f "./out/make/zip/darwin/$arch/bfg-repo-cleaner-gui-darwin-$arch-$VERSION.zip" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Archive found: ./out/make/zip/darwin/$arch/bfg-repo-cleaner-gui-darwin-$arch-$VERSION.zip"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Archive not found for $arch"
            find ./out/make -type f
          fi

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac' && steps.check-mac-archive.outputs.exists == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ./out/make/zip/darwin/${{ steps.mac-arch.outputs.arch }}/bfg-repo-cleaner-gui-darwin-${{ steps.mac-arch.outputs.arch }}-${{ steps.get-version-unix.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for Windows artifacts
        if: matrix.platform == 'win'
        id: check-win-artifact
        shell: powershell
        run: |
          # Use the version from the previous step
          $VERSION = "${{ steps.get-version-win.outputs.version }}"
          Write-Host "Package version: $VERSION"
          
          Write-Host "Checking for Windows installer"
          $installerPath = "./out/make/squirrel.windows/x64/bfg-repo-cleaner-gui-$VERSION Setup.exe"
          
          # Try to find the installer file if it's not in the expected location
          if (-not (Test-Path -Path $installerPath)) {
            Write-Host "Installer not found at expected path, searching for it..."
            $foundFiles = Get-ChildItem -Path "./out" -Recurse -File -Filter "*Setup.exe" | Select-Object -First 1
            
            if ($foundFiles) {
              $installerPath = $foundFiles.FullName
              Write-Host "Found installer at: $installerPath"
            } else {
              Write-Host "No installer files found"
              Get-ChildItem -Path "./out" -Recurse -File | ForEach-Object { $_.FullName }
            }
          }
          
          if (Test-Path -Path $installerPath) {
            echo "exists=true" >> $env:GITHUB_OUTPUT
            echo "setup_path=$installerPath" >> $env:GITHUB_OUTPUT
            Write-Host "Installer found at: $installerPath"
          } else {
            echo "exists=false" >> $env:GITHUB_OUTPUT
            Write-Host "Installer not found"
          }

      - name: Upload Windows artifacts
        if: matrix.platform == 'win' && steps.check-win-artifact.outputs.exists == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.check-win-artifact.outputs.setup_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for Linux Deb artifacts
        if: matrix.platform == 'linux'
        id: check-linux-deb
        run: |
          VERSION="${{ steps.get-version-unix.outputs.version }}"
          echo "Checking for Linux deb package with version $VERSION"
          if test -f "./out/make/deb/x64/bfg-repo-cleaner-gui_${VERSION}_amd64.deb"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Deb package found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Deb package not found"
            find ./out/make -type f
          fi

      - name: Upload Linux Deb artifacts
        if: matrix.platform == 'linux' && steps.check-linux-deb.outputs.exists == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ./out/make/deb/x64/bfg-repo-cleaner-gui_${{ steps.get-version-unix.outputs.version }}_amd64.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for Linux RPM artifacts
        if: matrix.platform == 'linux'
        id: check-linux-rpm
        run: |
          VERSION="${{ steps.get-version-unix.outputs.version }}"
          echo "Checking for Linux rpm package with version $VERSION"
          if test -f "./out/make/rpm/x64/bfg-repo-cleaner-gui-${VERSION}-1.x86_64.rpm"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "RPM package found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "RPM package not found"
            find ./out/make -type f
          fi

      - name: Upload Linux RPM artifacts
        if: matrix.platform == 'linux' && steps.check-linux-rpm.outputs.exists == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ./out/make/rpm/x64/bfg-repo-cleaner-gui-${{ steps.get-version-unix.outputs.version }}-1.x86_64.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
